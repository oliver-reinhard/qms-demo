/*
 * generated by Xtext 2.17.1
 */
package org.xtext.example.qms.scoping

import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EcoreFactory
import org.eclipse.xtext.scoping.IScope
import org.xtext.example.qms.qms.BomNode
import org.xtext.example.qms.qms.NodeReference
import org.xtext.example.qms.qms.QmsPackage
import org.xtext.example.qms.qms.RequirementNode

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class QmsScopeProvider extends AbstractQmsScopeProvider {

	static val epackage = QmsPackage.eINSTANCE
	
	override getScope(EObject context, EReference reference) {
		if (context instanceof NodeReference && reference === epackage.nodeReference_Ref) {
			return switch context.eContainer  {
				RequirementNode: getDefaultScopeForType(context, epackage.requirementNode)
				BomNode: getDefaultScopeForType(context, epackage.bomNode)
				default: super.getScope(context, reference)
			}
		}
		super.getScope(context, reference)
	}
	
	def IScope getDefaultScopeForType(EObject context, EClass type) {
		val reference = EcoreFactory.eINSTANCE.createEReference
		// Default scoping only uses the EType field of the reference:
		reference.EType = type
		val scope = super.getScope(context, reference)
		return scope
	}
	
}
