/**
 * generated by Xtext 2.17.1
 */
package org.xtext.example.qms.scoping;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.xtext.scoping.IScope;
import org.xtext.example.qms.qms.BomNode;
import org.xtext.example.qms.qms.NodeReference;
import org.xtext.example.qms.qms.QmsPackage;
import org.xtext.example.qms.qms.RequirementNode;
import org.xtext.example.qms.scoping.AbstractQmsScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class QmsScopeProvider extends AbstractQmsScopeProvider {
  private static final QmsPackage epackage = QmsPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      if (((context instanceof NodeReference) && (reference == QmsScopeProvider.epackage.getNodeReference_Ref()))) {
        IScope _switchResult = null;
        EObject _eContainer = context.eContainer();
        boolean _matched = false;
        if (_eContainer instanceof RequirementNode) {
          _matched=true;
          _switchResult = this.getDefaultScopeForType(context, QmsScopeProvider.epackage.getRequirementNode());
        }
        if (!_matched) {
          if (_eContainer instanceof BomNode) {
            _matched=true;
            _switchResult = this.getDefaultScopeForType(context, QmsScopeProvider.epackage.getBomNode());
          }
        }
        if (!_matched) {
          _switchResult = super.getScope(context, reference);
        }
        return _switchResult;
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
  
  public IScope getDefaultScopeForType(final EObject context, final EClass type) {
    final EReference reference = EcoreFactory.eINSTANCE.createEReference();
    reference.setEType(type);
    final IScope scope = super.getScope(context, reference);
    return scope;
  }
}
