/*
 * generated by Xtext 2.17.1
 */
package org.xtext.example.qms.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QmsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRepositoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepositoryNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	Repository | RepositoryNode;
		@Override public ParserRule getRule() { return rule; }
		
		//Repository | RepositoryNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Repository
		public RuleCall getRepositoryParserRuleCall_0() { return cRepositoryParserRuleCall_0; }
		
		//RepositoryNode
		public RuleCall getRepositoryNodeParserRuleCall_1() { return cRepositoryNodeParserRuleCall_1; }
	}
	public class RepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.Repository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRepositoryTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cRootAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRootRepositoryNodeParserRuleCall_4_0 = (RuleCall)cRootAssignment_4.eContents().get(0);
		
		//Repository:
		//	'repository'
		//	name=ID
		//	'type' type=RepositoryType
		//	root=RepositoryNode;
		@Override public ParserRule getRule() { return rule; }
		
		//'repository' name=ID 'type' type=RepositoryType root=RepositoryNode
		public Group getGroup() { return cGroup; }
		
		//'repository'
		public Keyword getRepositoryKeyword_0() { return cRepositoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=RepositoryType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//RepositoryType
		public RuleCall getTypeRepositoryTypeEnumRuleCall_3_0() { return cTypeRepositoryTypeEnumRuleCall_3_0; }
		
		//root=RepositoryNode
		public Assignment getRootAssignment_4() { return cRootAssignment_4; }
		
		//RepositoryNode
		public RuleCall getRootRepositoryNodeParserRuleCall_4_0() { return cRootRepositoryNodeParserRuleCall_4_0; }
	}
	public class RepositoryNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.RepositoryNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequirementNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvidenceNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBomNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RepositoryNode:
		//	RequirementNode | EvidenceNode | BomNode;
		@Override public ParserRule getRule() { return rule; }
		
		//RequirementNode | EvidenceNode | BomNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RequirementNode
		public RuleCall getRequirementNodeParserRuleCall_0() { return cRequirementNodeParserRuleCall_0; }
		
		//EvidenceNode
		public RuleCall getEvidenceNodeParserRuleCall_1() { return cEvidenceNodeParserRuleCall_1; }
		
		//BomNode
		public RuleCall getBomNodeParserRuleCall_2() { return cBomNodeParserRuleCall_2; }
	}
	public class RequirementNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.RequirementNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormerNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormerNameIDTerminalRuleCall_2_1_0 = (RuleCall)cFormerNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTitleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTitleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cTitleAssignment_4_1.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyNodeBodyElementParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Assignment cChildrenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChildrenRequirementNodeParserRuleCall_6_0 = (RuleCall)cChildrenAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// | QmsNode
		//RequirementNode:
		//	'req'
		//	name=ID ('was' formerName=ID)? // name in the previous version of the regulation
		//	'{' ('title' title=STRING)?
		//	body+=NodeBodyElement*
		//	children+=RequirementNode*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'req' name=ID ('was' formerName=ID)? // name in the previous version of the regulation
		//'{' ('title' title=STRING)? body+=NodeBodyElement* children+=RequirementNode* '}'
		public Group getGroup() { return cGroup; }
		
		//'req'
		public Keyword getReqKeyword_0() { return cReqKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('was' formerName=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'was'
		public Keyword getWasKeyword_2_0() { return cWasKeyword_2_0; }
		
		//formerName=ID
		public Assignment getFormerNameAssignment_2_1() { return cFormerNameAssignment_2_1; }
		
		//ID
		public RuleCall getFormerNameIDTerminalRuleCall_2_1_0() { return cFormerNameIDTerminalRuleCall_2_1_0; }
		
		//// name in the previous version of the regulation
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('title' title=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'title'
		public Keyword getTitleKeyword_4_0() { return cTitleKeyword_4_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_4_1() { return cTitleAssignment_4_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_4_1_0() { return cTitleSTRINGTerminalRuleCall_4_1_0; }
		
		//body+=NodeBodyElement*
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//NodeBodyElement
		public RuleCall getBodyNodeBodyElementParserRuleCall_5_0() { return cBodyNodeBodyElementParserRuleCall_5_0; }
		
		//children+=RequirementNode*
		public Assignment getChildrenAssignment_6() { return cChildrenAssignment_6; }
		
		//RequirementNode
		public RuleCall getChildrenRequirementNodeParserRuleCall_6_0() { return cChildrenRequirementNodeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class BomNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.BomNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTitleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTitleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTitleAssignment_3_1.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyNodeBodyElementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cWeightKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cWeightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWeightINTTerminalRuleCall_6_0 = (RuleCall)cWeightAssignment_6.eContents().get(0);
		private final Assignment cChildrenAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChildrenBomNodeParserRuleCall_7_0 = (RuleCall)cChildrenAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BomNode:
		//	'bom'
		//	name=ID
		//	'{' ('title' title=STRING)?
		//	body+=NodeBodyElement*
		//	'weight' weight=INT
		//	children+=BomNode*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'bom' name=ID '{' ('title' title=STRING)? body+=NodeBodyElement* 'weight' weight=INT children+=BomNode* '}'
		public Group getGroup() { return cGroup; }
		
		//'bom'
		public Keyword getBomKeyword_0() { return cBomKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('title' title=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'title'
		public Keyword getTitleKeyword_3_0() { return cTitleKeyword_3_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_3_1() { return cTitleAssignment_3_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_1_0() { return cTitleSTRINGTerminalRuleCall_3_1_0; }
		
		//body+=NodeBodyElement*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//NodeBodyElement
		public RuleCall getBodyNodeBodyElementParserRuleCall_4_0() { return cBodyNodeBodyElementParserRuleCall_4_0; }
		
		//'weight'
		public Keyword getWeightKeyword_5() { return cWeightKeyword_5; }
		
		//weight=INT
		public Assignment getWeightAssignment_6() { return cWeightAssignment_6; }
		
		//INT
		public RuleCall getWeightINTTerminalRuleCall_6_0() { return cWeightINTTerminalRuleCall_6_0; }
		
		//children+=BomNode*
		public Assignment getChildrenAssignment_7() { return cChildrenAssignment_7; }
		
		//BomNode
		public RuleCall getChildrenBomNodeParserRuleCall_7_0() { return cChildrenBomNodeParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EvidenceNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.EvidenceNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEviKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTitleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTitleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTitleAssignment_3_1.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyNodeBodyElementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenEvidenceNodeParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EvidenceNode:
		//	'evi'
		//	name=ID
		//	'{' ('title' title=STRING)?
		//	body+=NodeBodyElement*
		//	children+=EvidenceNode*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'evi' name=ID '{' ('title' title=STRING)? body+=NodeBodyElement* children+=EvidenceNode* '}'
		public Group getGroup() { return cGroup; }
		
		//'evi'
		public Keyword getEviKeyword_0() { return cEviKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('title' title=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'title'
		public Keyword getTitleKeyword_3_0() { return cTitleKeyword_3_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_3_1() { return cTitleAssignment_3_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_1_0() { return cTitleSTRINGTerminalRuleCall_3_1_0; }
		
		//body+=NodeBodyElement*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//NodeBodyElement
		public RuleCall getBodyNodeBodyElementParserRuleCall_4_0() { return cBodyNodeBodyElementParserRuleCall_4_0; }
		
		//children+=EvidenceNode*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }
		
		//EvidenceNode
		public RuleCall getChildrenEvidenceNodeParserRuleCall_5_0() { return cChildrenEvidenceNodeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NodeBodyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.NodeBodyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////QmsNode 
		////;
		//NodeBodyElement:
		//	Text | NodeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//Text | NodeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Text
		public RuleCall getTextParserRuleCall_0() { return cTextParserRuleCall_0; }
		
		//NodeReference
		public RuleCall getNodeReferenceParserRuleCall_1() { return cNodeReferenceParserRuleCall_1; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Text:
		//	'text' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'text' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'text'
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class NodeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.NodeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefRepositoryNodeCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefRepositoryNodeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRefRepositoryNodeCrossReference_1_0.eContents().get(1);
		
		//NodeReference:
		//	'ref' ref=[RepositoryNode|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' ref=[RepositoryNode|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//ref=[RepositoryNode|QualifiedName]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[RepositoryNode|QualifiedName]
		public CrossReference getRefRepositoryNodeCrossReference_1_0() { return cRefRepositoryNodeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getRefRepositoryNodeQualifiedNameParserRuleCall_1_0_1() { return cRefRepositoryNodeQualifiedNameParserRuleCall_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class RepositoryTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qms.Qms.RepositoryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREQUIREMENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREQUIREMENTRequirementKeyword_0_0 = (Keyword)cREQUIREMENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEVIDENCEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEVIDENCEEvidenceKeyword_1_0 = (Keyword)cEVIDENCEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cQMSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cQMSQmsKeyword_2_0 = (Keyword)cQMSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBOMEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBOMBomKeyword_3_0 = (Keyword)cBOMEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RepositoryType:
		//	REQUIREMENT='requirement' | EVIDENCE='evidence' | QMS='qms' | BOM='bom';
		public EnumRule getRule() { return rule; }
		
		//REQUIREMENT='requirement' | EVIDENCE='evidence' | QMS='qms' | BOM='bom'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REQUIREMENT='requirement'
		public EnumLiteralDeclaration getREQUIREMENTEnumLiteralDeclaration_0() { return cREQUIREMENTEnumLiteralDeclaration_0; }
		
		//'requirement'
		public Keyword getREQUIREMENTRequirementKeyword_0_0() { return cREQUIREMENTRequirementKeyword_0_0; }
		
		//EVIDENCE='evidence'
		public EnumLiteralDeclaration getEVIDENCEEnumLiteralDeclaration_1() { return cEVIDENCEEnumLiteralDeclaration_1; }
		
		//'evidence'
		public Keyword getEVIDENCEEvidenceKeyword_1_0() { return cEVIDENCEEvidenceKeyword_1_0; }
		
		//QMS='qms'
		public EnumLiteralDeclaration getQMSEnumLiteralDeclaration_2() { return cQMSEnumLiteralDeclaration_2; }
		
		//'qms'
		public Keyword getQMSQmsKeyword_2_0() { return cQMSQmsKeyword_2_0; }
		
		//BOM='bom'
		public EnumLiteralDeclaration getBOMEnumLiteralDeclaration_3() { return cBOMEnumLiteralDeclaration_3; }
		
		//'bom'
		public Keyword getBOMBomKeyword_3_0() { return cBOMBomKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final RepositoryElements pRepository;
	private final RepositoryTypeElements eRepositoryType;
	private final RepositoryNodeElements pRepositoryNode;
	private final RequirementNodeElements pRequirementNode;
	private final BomNodeElements pBomNode;
	private final EvidenceNodeElements pEvidenceNode;
	private final NodeBodyElementElements pNodeBodyElement;
	private final TextElements pText;
	private final NodeReferenceElements pNodeReference;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QmsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRepository = new RepositoryElements();
		this.eRepositoryType = new RepositoryTypeElements();
		this.pRepositoryNode = new RepositoryNodeElements();
		this.pRequirementNode = new RequirementNodeElements();
		this.pBomNode = new BomNodeElements();
		this.pEvidenceNode = new EvidenceNodeElements();
		this.pNodeBodyElement = new NodeBodyElementElements();
		this.pText = new TextElements();
		this.pNodeReference = new NodeReferenceElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.qms.Qms".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Repository | RepositoryNode;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Repository:
	//	'repository'
	//	name=ID
	//	'type' type=RepositoryType
	//	root=RepositoryNode;
	public RepositoryElements getRepositoryAccess() {
		return pRepository;
	}
	
	public ParserRule getRepositoryRule() {
		return getRepositoryAccess().getRule();
	}
	
	//enum RepositoryType:
	//	REQUIREMENT='requirement' | EVIDENCE='evidence' | QMS='qms' | BOM='bom';
	public RepositoryTypeElements getRepositoryTypeAccess() {
		return eRepositoryType;
	}
	
	public EnumRule getRepositoryTypeRule() {
		return getRepositoryTypeAccess().getRule();
	}
	
	//RepositoryNode:
	//	RequirementNode | EvidenceNode | BomNode;
	public RepositoryNodeElements getRepositoryNodeAccess() {
		return pRepositoryNode;
	}
	
	public ParserRule getRepositoryNodeRule() {
		return getRepositoryNodeAccess().getRule();
	}
	
	//// | QmsNode
	//RequirementNode:
	//	'req'
	//	name=ID ('was' formerName=ID)? // name in the previous version of the regulation
	//	'{' ('title' title=STRING)?
	//	body+=NodeBodyElement*
	//	children+=RequirementNode*
	//	'}';
	public RequirementNodeElements getRequirementNodeAccess() {
		return pRequirementNode;
	}
	
	public ParserRule getRequirementNodeRule() {
		return getRequirementNodeAccess().getRule();
	}
	
	//BomNode:
	//	'bom'
	//	name=ID
	//	'{' ('title' title=STRING)?
	//	body+=NodeBodyElement*
	//	'weight' weight=INT
	//	children+=BomNode*
	//	'}';
	public BomNodeElements getBomNodeAccess() {
		return pBomNode;
	}
	
	public ParserRule getBomNodeRule() {
		return getBomNodeAccess().getRule();
	}
	
	//EvidenceNode:
	//	'evi'
	//	name=ID
	//	'{' ('title' title=STRING)?
	//	body+=NodeBodyElement*
	//	children+=EvidenceNode*
	//	'}';
	public EvidenceNodeElements getEvidenceNodeAccess() {
		return pEvidenceNode;
	}
	
	public ParserRule getEvidenceNodeRule() {
		return getEvidenceNodeAccess().getRule();
	}
	
	////QmsNode 
	////;
	//NodeBodyElement:
	//	Text | NodeReference;
	public NodeBodyElementElements getNodeBodyElementAccess() {
		return pNodeBodyElement;
	}
	
	public ParserRule getNodeBodyElementRule() {
		return getNodeBodyElementAccess().getRule();
	}
	
	//Text:
	//	'text' text=STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//NodeReference:
	//	'ref' ref=[RepositoryNode|QualifiedName];
	public NodeReferenceElements getNodeReferenceAccess() {
		return pNodeReference;
	}
	
	public ParserRule getNodeReferenceRule() {
		return getNodeReferenceAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
