/*
 * generated by Xtext 2.17.1
 */
package org.xtext.example.qms.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.qms.qms.BomNode;
import org.xtext.example.qms.qms.EvidenceNode;
import org.xtext.example.qms.qms.NodeReference;
import org.xtext.example.qms.qms.QmsPackage;
import org.xtext.example.qms.qms.Repository;
import org.xtext.example.qms.qms.RequirementNode;
import org.xtext.example.qms.qms.Text;
import org.xtext.example.qms.services.QmsGrammarAccess;

@SuppressWarnings("all")
public class QmsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QmsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QmsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QmsPackage.BOM_NODE:
				sequence_BomNode(context, (BomNode) semanticObject); 
				return; 
			case QmsPackage.EVIDENCE_NODE:
				sequence_EvidenceNode(context, (EvidenceNode) semanticObject); 
				return; 
			case QmsPackage.NODE_REFERENCE:
				sequence_NodeReference(context, (NodeReference) semanticObject); 
				return; 
			case QmsPackage.REPOSITORY:
				sequence_Repository(context, (Repository) semanticObject); 
				return; 
			case QmsPackage.REQUIREMENT_NODE:
				sequence_RequirementNode(context, (RequirementNode) semanticObject); 
				return; 
			case QmsPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns BomNode
	 *     RepositoryNode returns BomNode
	 *     BomNode returns BomNode
	 *
	 * Constraint:
	 *     (name=ID title=STRING? body+=NodeBodyElement* weight=INT children+=BomNode*)
	 */
	protected void sequence_BomNode(ISerializationContext context, BomNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns EvidenceNode
	 *     RepositoryNode returns EvidenceNode
	 *     EvidenceNode returns EvidenceNode
	 *
	 * Constraint:
	 *     (name=ID title=STRING? body+=NodeBodyElement* children+=EvidenceNode*)
	 */
	protected void sequence_EvidenceNode(ISerializationContext context, EvidenceNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeBodyElement returns NodeReference
	 *     NodeReference returns NodeReference
	 *
	 * Constraint:
	 *     ref=[RepositoryNode|QualifiedName]
	 */
	protected void sequence_NodeReference(ISerializationContext context, NodeReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmsPackage.Literals.NODE_REFERENCE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmsPackage.Literals.NODE_REFERENCE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNodeReferenceAccess().getRefRepositoryNodeQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(QmsPackage.Literals.NODE_REFERENCE__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Repository
	 *     Repository returns Repository
	 *
	 * Constraint:
	 *     (name=ID type=RepositoryType root=RepositoryNode)
	 */
	protected void sequence_Repository(ISerializationContext context, Repository semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmsPackage.Literals.MODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmsPackage.Literals.MODEL__NAME));
			if (transientValues.isValueTransient(semanticObject, QmsPackage.Literals.REPOSITORY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmsPackage.Literals.REPOSITORY__TYPE));
			if (transientValues.isValueTransient(semanticObject, QmsPackage.Literals.REPOSITORY__ROOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmsPackage.Literals.REPOSITORY__ROOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRepositoryAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRepositoryAccess().getTypeRepositoryTypeEnumRuleCall_3_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRepositoryAccess().getRootRepositoryNodeParserRuleCall_4_0(), semanticObject.getRoot());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns RequirementNode
	 *     RepositoryNode returns RequirementNode
	 *     RequirementNode returns RequirementNode
	 *
	 * Constraint:
	 *     (name=ID formerName=ID? title=STRING? body+=NodeBodyElement* children+=RequirementNode*)
	 */
	protected void sequence_RequirementNode(ISerializationContext context, RequirementNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeBodyElement returns Text
	 *     Text returns Text
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmsPackage.Literals.TEXT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmsPackage.Literals.TEXT__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
}
