/**
 * generated by Xtext 2.17.1
 */
package org.xtext.example.qms.qms.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.qms.qms.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class QmsFactoryImpl extends EFactoryImpl implements QmsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static QmsFactory init()
  {
    try
    {
      QmsFactory theQmsFactory = (QmsFactory)EPackage.Registry.INSTANCE.getEFactory(QmsPackage.eNS_URI);
      if (theQmsFactory != null)
      {
        return theQmsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new QmsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QmsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case QmsPackage.MODEL: return createModel();
      case QmsPackage.REPOSITORY: return createRepository();
      case QmsPackage.REPOSITORY_NODE: return createRepositoryNode();
      case QmsPackage.REQUIREMENT_NODE: return createRequirementNode();
      case QmsPackage.BOM_NODE: return createBomNode();
      case QmsPackage.EVIDENCE_NODE: return createEvidenceNode();
      case QmsPackage.NODE_BODY_ELEMENT: return createNodeBodyElement();
      case QmsPackage.TEXT: return createText();
      case QmsPackage.NODE_REFERENCE: return createNodeReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case QmsPackage.REPOSITORY_TYPE:
        return createRepositoryTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case QmsPackage.REPOSITORY_TYPE:
        return convertRepositoryTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Repository createRepository()
  {
    RepositoryImpl repository = new RepositoryImpl();
    return repository;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RepositoryNode createRepositoryNode()
  {
    RepositoryNodeImpl repositoryNode = new RepositoryNodeImpl();
    return repositoryNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RequirementNode createRequirementNode()
  {
    RequirementNodeImpl requirementNode = new RequirementNodeImpl();
    return requirementNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BomNode createBomNode()
  {
    BomNodeImpl bomNode = new BomNodeImpl();
    return bomNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EvidenceNode createEvidenceNode()
  {
    EvidenceNodeImpl evidenceNode = new EvidenceNodeImpl();
    return evidenceNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeBodyElement createNodeBodyElement()
  {
    NodeBodyElementImpl nodeBodyElement = new NodeBodyElementImpl();
    return nodeBodyElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeReference createNodeReference()
  {
    NodeReferenceImpl nodeReference = new NodeReferenceImpl();
    return nodeReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RepositoryType createRepositoryTypeFromString(EDataType eDataType, String initialValue)
  {
    RepositoryType result = RepositoryType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRepositoryTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QmsPackage getQmsPackage()
  {
    return (QmsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static QmsPackage getPackage()
  {
    return QmsPackage.eINSTANCE;
  }

} //QmsFactoryImpl
